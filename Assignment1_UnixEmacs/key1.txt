Homework: Learning to use Emacs
--------------------------------------------------------------------------------
Exercise 1.1: Moving around in Emacs
1.
2. C-s P U B L I C Enter
3. C-s L a Enter M-b
4. C-s s e l f Enter M-b
5. C-s a r r o w Enter M-b
6. C-e
7. C-a
8. Yes, searching for the word using the forward search C-s and then moving
forward/backward by word/line with M-b/M-f/C-a/C-e.
9. No, I did not use arrow keys.
10. C-x C-c
--------------------------------------------------------------------------------
Exercise 1.2: Deleting text in Emacs
1.
2. C-u 18 M-g M-g C-k
3. C-s D E Enter C-a C-k
4. C-s # C C-s Enter C-p C-a C-M-k
5. C-s < ! Enter C-b C-b C-M-k
C-x C-s C-x C-c
--------------------------------------------------------------------------------
Exercise 1.3: Inserting text in Emacs
1.
2. C-s A Enter M-f C-f C-d 3 7 C-s A Enter M-f C-f C-d 3 7
3. C-r U Enter C-f C-d C-d C-d C-d S - A S C I I
4. C-s / o l C-a Enter
5. C-x C-s y e s Enter C-x C-c
--------------------------------------------------------------------------------
Exercise 1.4: Other editing tasks in Emacs
1.
2.
3. M-> C-r < p C-r Enter C-SP C-n M-w C-r < ! Enter C-SP C-n M-w C-r < ! Enter 
C-SP C-n M-w C-r < ! Enter C-SP C-n M-w M-< C-u 18 M-g M-g C-y C-v C-v C-n C-n 
C-n C-y M-y C-v C-v C-v C-v C-s S Enter C-n C-n C-y M-y C-a C-d C-p C-d C-s 
l o g SP l Enter C-a C-k C-y M-y M-y M-y M-y M-} M-} M-} M-} M-} M-{
4.
5. C-SP M-> C-w
6. C-x u
7. - - > M-v C-n M-} M-} M-} M-{ < ! - -
8. M-< C-s < o l > C-s C-s C-s C-s C-s C-s C-s Enter
Found 7 instances
M-< M-x replace-string Enter <ol> Enter <OL> Enter
9. C-x C-s C-x C-c
--------------------------------------------------------------------------------
Exercise 1.5: Doing commands in Emacs
1. e m a c s M-! m k d i r SP ~ / j u n k Enter
2. C-x C-f ~ / j u n k / h e l l o . c Enter <insertCprogram> M-! c d j u n k
3. M-x c o m p i l e Enter Backspace Backspace Backspace Backspace Backspace
Backspace Backspace Backspace g c c SP -o SP h e l l o SP h e l l o . c Enter
4. C-x b h e l l o - o u t Enter C-u M-! . / h e l l o Enter
5. M-x a p p e n d - t o - b u f f e r Enter key1.txt Enter
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}
--------------------------------------------------------------------------------
Exercise 1.6: Running Elisp code
1. e m a c s Enter C-x b Enter
2. ( r a n d o m ) C-j
3. ( s e t q SP x SP ( r a n d o m ) ) C-j () ( s e t q SP y SP ( r a n d o m )
) C-j
x = 2170197797526667690
y = 1596264168479051065
4. ( * SP x SP y ) C-j
x*y = 3.464209e36
(* x y) = -1574129982335942438
The answer is incorrect. It is a random number.
5. M-: ( * SP x SP y ) Enter
The output is the same.
6. They are not truly random, but "pseudo" random. Evaluating an expression with
random numbers as we did results in a "random" answer. Doing that same
expression results in the same "random answer". Thus, the random integers are
not truly random since the same expression will seemingly always result in the
same "random" output. The properties of these numbers mimic a random series,
even if they are not random. The same seeds/inputs will have the same result.
7. C-h f r a n d o m Enter C-x b * h e l p * Enter
All integers between the "most-negative-fixnum" and "most-positive-fixnum" are
equally likely. The way the "pseudo-random" numbers are generated means that
starting from a given seed, the 'random' function will always generate the same 
random numbers. The most-positive-fixnum is 2305843009213693951. Any
attempt to produce a product greater than this, or less than the
most-negative-fixnum (-2305843009213693952) will cause the product 
to be incorrect. The magnitude of the probability of overflow is very great,
it would be hard to calculate even knowing the upper and lower bounds.
--------------------------------------------------------------------------------
